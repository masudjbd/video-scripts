#!/usr/local/bin/lua
usage_str = [[
Usage:
  lgraph 'function of x'

Example:
  lgraph 'x^2'
]]

-- Supporting functions.

local function round(x)
  return math.floor(x + 0.5)
end

-- This returns a *function* that maps [a1, b1] to [a2, b2].
local function range_mapper(a1, b1, a2, b2)
  return function (x)
    local perc_from_a1 = (x - a1) / (b1 - a1)
    return a2 + (b2 - a2) * perc_from_a1
  end
end

-- Define the Grapher class.

Grapher = {xmin = -1, xmax = 1, ymin = -1, ymax = 1, ncols = 170, nrows = 50}

function Grapher:new ()
  return setmetatable({}, {__index = self})
end

-- Makes a map self.char[col][row] = <nil or character to print>.
function Grapher:setup_char_table(eqn)
  local f = loadstring('local x = ...; return ' .. eqn)

  -- This will be a table of tables so that self.char[col][row] is either
  -- nil or the character to print at that location.
  self.char = {}

  local y_to_row = range_mapper(self.ymin, self.ymax, self.nrows, 1)
  local col_to_x = range_mapper(1, self.ncols, self.xmin, self.xmax)

  for col = 1, self.ncols do
    local y = f(col_to_x(col))
    local row = round(y_to_row(y))

    if self.char[col] == nil then self.char[col] = {} end
    self.char[col][row] = 'o'
  end
end

function Grapher:graph(eqn)
  self:setup_char_table(eqn)

  for row = 1, self.nrows do
    for col = 1, self.ncols do
      io.write(self.char[col][row] or ' ')
    end
    io.write('\n')
  end
end

-- Define AxisGrapher, a subclass of Grapher.

AxisGrapher = Grapher:new()

function AxisGrapher:setup_char_table(eqn)
  Grapher.setup_char_table(self, eqn)  -- Call super's version of this method.

  -- Draw the y-axis.
  local c = round(range_mapper(self.xmin, self.xmax, 1, self.ncols)(0))
  for r = 1, self.nrows do self.char[c][r] = '|' end

  -- Draw the x-axis.
  local r = round(range_mapper(self.ymin, self.ymax, self.nrows, 1)(0))
  for c = 1, self.ncols do self.char[c][r] = '-' end
end

-- Parse command-line arguments.

if not arg[1] or (arg[1] == '-a' and not arg[2]) then
  print(usage_str)
  os.exit(0)
end

if arg[1] == '-a' then
  g = AxisGrapher:new()
  arg[1] = arg[2]
else
  g = Grapher:new()
end

-- Graph the input.

g:graph(arg[1])
